Performance Log

Theory - rename_sheet is slow because it loops through every cell within the sheet extent
Rationale - profiler data for rename sheet when there are no cell references:
   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    7.660    7.660 case.py:632(_callTestMethod)
        1    0.015    0.015    7.660    7.660 test_workbook.py:95(test_rename_nocellref)
     1000    4.205    0.004    5.631    0.006 Workbook.py:630(rename_sheet)
    10000    0.089    0.000    2.003    0.000 Workbook.py:289(set_cell_contents)
   200000    0.344    0.000    0.910    0.000 Sheet.py:46(split_cell_ref)
    80000    0.054    0.000    0.815    0.000 Sheet.py:11(get_cell)
11148046/11148043    0.775    0.000    0.775    0.000 {built-in method builtins.len}
     1000    0.735    0.001    0.735    0.001 Workbook.py:623(update_cell_sn)
    10000    0.053    0.000    0.657    0.000 Workbook.py:161(handle_update_tree)
    40000    0.067    0.000    0.591    0.000 Workbook.py:493(get_cell_value)
    30000    0.051    0.000    0.576    0.000 Workbook.py:149(get_cell)
   110000    0.053    0.000    0.565    0.000 Sheet.py:63(out_of_bounds)

The function update_cell_sn loops through every cell, so we would like to get rid of that
function. From the profiler, we can see that update_cell_sn takes up almost a second of
runtime.

Outcome - Here is the new profiler information:
   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    6.675    6.675 case.py:632(_callTestMethod)
        1    0.016    0.016    6.675    6.675 test_workbook.py:95(test_rename_nocellref)
     1000    3.961    0.004    4.647    0.005 Workbook.py:630(rename_sheet)
    10000    0.088    0.000    1.999    0.000 Workbook.py:289(set_cell_contents)
   200000    0.343    0.000    0.911    0.000 Sheet.py:46(split_cell_ref)
    80000    0.053    0.000    0.812    0.000 Sheet.py:11(get_cell)
11148046/11148043    0.769    0.000    0.769    0.000 {built-in method builtins.len}
    10000    0.053    0.000    0.655    0.000 Workbook.py:161(handle_update_tree)
    40000    0.063    0.000    0.586    0.000 Workbook.py:493(get_cell_value)
    30000    0.050    0.000    0.576    0.000 Workbook.py:149(get_cell)
   110000    0.050    0.000    0.562    0.000 Sheet.py:63(out_of_bounds)
    20000    0.060    0.000    0.498    0.000 Workbook.py:231(evaluate_cell)

We shaved off about one second of runtime, which is a solid improvement.

Theory - copy_sheet is slow because we unnecessarily loop through every cell within
the sheet extent
Rationale - see the profiler for a copy sheet test case:
   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    8.282    8.282 case.py:632(_callTestMethod)
        1    0.007    0.007    8.282    8.282 test_workbook.py:139(test_copy_nocellref)
      500    0.461    0.001    8.259    0.017 Workbook.py:771(copy_sheet)
    50100    0.422    0.000    7.394    0.000 Workbook.py:289(set_cell_contents)
  1002000    1.393    0.000    3.322    0.000 Sheet.py:46(split_cell_ref)
   400800    0.241    0.000    3.037    0.000 Sheet.py:11(get_cell)

For each of the calls to copy_sheet, we make 100 calls to set_cell_contents, which is slow.
Outcome - see profiler with the fix in place:
   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    2.950    2.950 case.py:632(_callTestMethod)
        1    0.004    0.004    2.950    2.950 test_workbook.py:139(test_copy_nocellref)
      500    0.407    0.001    2.930    0.006 Workbook.py:773(copy_sheet)
960500/500    0.987    0.000    2.360    0.005 copy.py:128(deepcopy)
100500/500    0.263    0.000    2.357    0.005 copy.py:257(_reconstruct)
100500/500    0.274    0.000    2.352    0.005 copy.py:225(_deepcopy_dict)
 5500/500    0.027    0.000    2.345    0.005 copy.py:199(_deepcopy_list)
  2021500    0.204    0.000    0.204    0.000 {method 'get' of 'dict' objects}

Now, the time is dominated by the time it takes to deepcopy, which is inevitable. Thus,
our theory was correct.

Theory - our code in rename sheet was slow because we initialize the dependency graph to
contain a key for every location, even if that location has no cell references.
Rationale - our tests for rename_sheet where cells have no cell references took 7 seconds initially.
Outcome - after changing the dependency graph such that it only contains locations as keys
if that cell location has outgoing or ingoing edges, we noticed that the same test took 2 seconds
instead, which is a drastic improvement. This improved the runtime because it lowered the number
of keys our rename_sheet code had to loop through.


fix to rename sheet:

look for all cells with cell references outgoing - set_cell_contents those to empty, and
set_cell_contents them in the new sheet to the right content

what about ingoing edges?
simply look through all ingoings and use sheetnameextractor right?