Performance Log

Theory - We think that our cell updates are slow because we open the parser too many times.
Rationale - According to the profiler, lark open takes up a large proportion of the runtime.
This is the top of the profiler for test_long_chain, with 10 iterations, 1.077s:
ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    1    0.000    0.000    1.072    1.072 case.py:548(_callTestMethod)
    1    0.000    0.000    1.072    1.072 test_updates.py:41(test_long_chain)
    11    0.000    0.000    1.071    0.097 Workbook.py:239(set_cell_contents)
    74    0.000    0.000    1.000    0.014 lark.py:561(open)
    74    0.002    0.000    0.996    0.013 lark.py:267(__init__)
    11    0.002    0.000    0.914    0.083 Workbook.py:154(handle_update_tree)

Outcome - After we made changes, here is what happened to the measurements. Yay we were right! / Sigh we were wrong!
Same profiler for test_long_chain, which now runs in 0.149s:
ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    1    0.000    0.000    0.144    0.144 case.py:632(_callTestMethod)
    1    0.000    0.000    0.144    0.144 test_updates.py:43(test_long_chain)
    11    0.000    0.000    0.144    0.013 Workbook.py:239(set_cell_contents)
    74    0.000    0.000    0.134    0.002 lark.py:637(parse)
    74    0.000    0.000    0.134    0.002 parser_frontends.py:100(parse)
    74    0.001    0.000    0.134    0.002 earley.py:263(parse)
    11    0.000    0.000    0.125    0.011 Workbook.py:155(handle_update_tree)

Theory - we are calling parser.parse too many times
Rationale - See profiler for test_large_cycle:
Takes 10s for 100 iterations:
ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    1    0.000    0.000   10.001   10.001 case.py:632(_callTestMethod)
    1    0.000    0.000   10.001   10.001 test_cycles.py:43(test_large_cycle)
    1    0.000    0.000    9.999    9.999 testStructures.py:46(create_large_cycle)
    100    0.001    0.000    9.998    0.100 Workbook.py:239(set_cell_contents)
    100    0.024    0.000    9.812    0.098 Workbook.py:155(handle_update_tree)
    5050    0.026    0.000    9.483    0.002 Workbook.py:198(evaluate_cell)
    5150    0.005    0.000    9.042    0.002 lark.py:637(parse)
Outcome - This did in fact speed up the code significantly.
Takes 1.028s for 100 iterations:
ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    1    0.000    0.000    1.024    1.024 case.py:632(_callTestMethod)
    1    0.000    0.000    1.024    1.024 test_cycles.py:43(test_large_cycle)
    1    0.000    0.000    1.021    1.021 testStructures.py:46(create_large_cycle)
    100    0.001    0.000    1.021    0.010 Workbook.py:233(set_cell_contents)
    100    0.018    0.000    0.837    0.008 Workbook.py:155(handle_update_tree)
    5050    0.016    0.000    0.532    0.000 Workbook.py:198(evaluate_cell)
    5050    0.006    0.000    0.364    0.000 Workbook.py:380(detect_cycle)